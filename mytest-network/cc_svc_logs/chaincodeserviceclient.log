listening on *:4000
Wallet path: /app/hyperledger-fabric/mytest-network/chaincodeserviceclient/wallet
Wallet path: /app/hyperledger-fabric/mytest-network/chaincodeserviceclient/wallet
2024-07-21T08:04:22.014Z - [31merror[39m: [ServiceEndpoint]: This service endpoint peer1-org2-grpcs://hlf-node2:7051 has an active grpc service connection
2024-07-21T08:04:22.018Z - [32minfo[39m: [NetworkConfig]: buildPeer - Unable to connect to the endorser peer1-org2 due to Error: This service endpoint peer1-org2-grpcs://hlf-node2:7051 has an active grpc service connection
    at Endorser.connect (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-common/lib/ServiceEndpoint.js:105:10)
    at buildPeer (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/impl/ccp/networkconfig.js:125:20)
    at async Object.loadFromConfig (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/impl/ccp/networkconfig.js:48:13)
    at async Gateway.connect (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/gateway.js:303:13)
    at async module.exports.getNetworkInstance (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/util/networkutil.js:82:3)
    at async main (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/getClientServiceReq.js:29:24)
Use network channel for new services: synergychannel.
Use network channel for new services: synergychannel.
2024-07-21T08:04:22.488Z - [31merror[39m: [Channel]: addCommitter[mytestchannel] - error::Committer orderer1-org1:7050 already exists
2024-07-21T08:04:22.488Z - [31merror[39m: [DiscoveryResultsProcessor]: _buildOrderer[mytestchannel] - Unable to connect to the discovered orderer orderer1-org1:7050 due to Error: Committer orderer1-org1:7050 already exists
2024-07-21T08:04:22.576Z - [31merror[39m: [Channel]: Endorser peer1-org1:7051 already exists
2024-07-21T08:04:22.576Z - [31merror[39m: [DiscoveryResultsProcessor]: _buildPeer[mytestchannel] - Unable to connect to the discovered peer peer1-org1:7051 due to Error: Endorser peer1-org1:7051 already exists
Submit Contact creation transaction.
2024-07-21T08:04:22.629Z - [31merror[39m: [Channel]: Endorser peer1-org3:7051 already exists
2024-07-21T08:04:22.629Z - [31merror[39m: [DiscoveryResultsProcessor]: _buildPeer[mytestchannel] - Unable to connect to the discovered peer peer1-org3:7051 due to Error: Endorser peer1-org3:7051 already exists
Submit get client request creation details.
2024-07-21T08:04:22.764Z - [31merror[39m: [Transaction]: Error: No valid responses from any peers. Errors:
    peer=peer1-org2:7051, status=500, message=9000 does not exist
    peer=peer1-org3:7051, status=500, message=9000 does not exist
    at newEndorsementError (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/transaction.js:77:12)
    at getResponsePayload (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/transaction.js:45:23)
    at Transaction.submit (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/transaction.js:258:28)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async main (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/getClientServiceReq.js:33:44)
Error processing transaction. Error: No valid responses from any peers. Errors:
    peer=peer1-org2:7051, status=500, message=9000 does not exist
    peer=peer1-org3:7051, status=500, message=9000 does not exist
Error: No valid responses from any peers. Errors:
    peer=peer1-org2:7051, status=500, message=9000 does not exist
    peer=peer1-org3:7051, status=500, message=9000 does not exist
    at newEndorsementError (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/transaction.js:77:12)
    at getResponsePayload (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/transaction.js:45:23)
    at Transaction.submit (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/fabric-network/lib/transaction.js:258:28)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async main (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/getClientServiceReq.js:33:44)
Disconnect from Fabric gateway.
ClientServiceRequest retrieved successfully.
10000  successfully created
Transaction complete.
Disconnect from Fabric gateway.
ClientServiceRequest created successfully.
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: undefined,
  readyForQuery: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: Query {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    text: `SELECT "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date FROM client_service_request ORDER BY date DESC`,
    values: undefined,
    rows: undefined,
    types: undefined,
    name: undefined,
    binary: undefined,
    portal: '',
    callback: [Function (anonymous)],
    _rowMode: undefined,
    _result: Result {
      command: null,
      rowCount: null,
      oid: null,
      rows: [],
      fields: [],
      _parsers: undefined,
      _types: [TypeOverrides],
      RowCtor: null,
      rowAsArray: false,
      _prebuiltEmptyResultObject: null
    },
    _results: Result {
      command: null,
      rowCount: null,
      oid: null,
      rows: [],
      fields: [],
      _parsers: undefined,
      _types: [TypeOverrides],
      RowCtor: null,
      rowAsArray: false,
      _prebuiltEmptyResultObject: null
    },
    _canceledDueToError: false,
    [Symbol(kCapture)]: false
  },
  readyForQuery: false,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
false
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
false
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:32PM'
  },
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  }
]
request received at clientrequests change: 82817
received req
=========== Start: getClientServiceRequet ========= 82817
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='82817'
after clientrequest call
[
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-14-2024 01:45PM'
  }
]
request received at clientrequestextn: 82817
received req
=========== Start: getClientServiceRequest extn ========= 82817
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='82817' order by date desc
false
request received at contactrequests: test-user1@org1.com
received req
=========== Start: getContactServiceRequest ========= test-user1@org1.com
select * from contact where email='test-user1@org1.com'
select * from contact where email='test-user1@org1.com'
false
request received at contactrequests: org2-user1@org2.com
received req
=========== Start: getContactServiceRequest ========= org2-user1@org2.com
select * from contact where email='org2-user1@org2.com'
select * from contact where email='org2-user1@org2.com'
Result {
  command: 'SELECT',
  rowCount: 1,
  oid: null,
  rows: [
    {
      contactId: '223460',
      user: 'org2-user1',
      phone: '65789456',
      email: 'org2-user1@org2.com',
      status: 'Active',
      organization: 'Org2',
      role: 'test-user-role1-org2'
    }
  ],
  fields: [
    Field {
      name: 'contactId',
      tableID: 16417,
      columnID: 1,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'user',
      tableID: 16417,
      columnID: 2,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'phone',
      tableID: 16417,
      columnID: 3,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'email',
      tableID: 16417,
      columnID: 4,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'status',
      tableID: 16417,
      columnID: 5,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'organization',
      tableID: 16417,
      columnID: 6,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'role',
      tableID: 16417,
      columnID: 7,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    }
  ],
  _parsers: [
    [Function: noParse],
    [Function: noParse],
    [Function: noParse],
    [Function: noParse],
    [Function: noParse],
    [Function: noParse],
    [Function: noParse]
  ],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  RowCtor: null,
  rowAsArray: false,
  _prebuiltEmptyResultObject: {
    contactId: null,
    user: null,
    phone: null,
    email: null,
    status: null,
    organization: null,
    role: null
  }
}
[
  {
    contactId: '223460',
    user: 'org2-user1',
    phone: '65789456',
    email: 'org2-user1@org2.com',
    status: 'Active',
    organization: 'Org2',
    role: 'test-user-role1-org2'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 71996
received req
=========== Start: getClientServiceRequet ========= 71996
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='71996'
after clientrequest call
[
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  }
]
request received at clientrequestextn: 71996
received req
=========== Start: getClientServiceRequest extn ========= 71996
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='71996' order by date desc
false
19866 create clientServiceRequest
Wallet path: /app/hyperledger-fabric/mytest-network/chaincodeserviceclient/wallet
Use network channel for new services: synergychannel.
Submit Request details creation transaction.
19866  successfully created
Need cash for test
Transaction complete.
Disconnect from Fabric gateway.
{
  requestId: '19866',
  issue_type: 'Service Request',
  product: 'Cash',
  subject: 'Need cash for test',
  description: 'Need cash for test',
  message: 'Event:Request Created',
  created_by: 'org2-user1/Org2',
  status: 'open',
  message_from: 'org2-user1/Org2',
  messageinsert: 'yes',
  messageid: '77011'
}
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 71996
received req
=========== Start: getClientServiceRequet ========= 71996
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='71996'
after clientrequest call
[
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  }
]
request received at clientrequestextn: 71996
received req
=========== Start: getClientServiceRequest extn ========= 71996
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='71996' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  }
]
request received at clientrequestextn: 19866
received req
=========== Start: getClientServiceRequest extn ========= 19866
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='19866' order by date desc
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '19866',
    to_char: 'JUL-24-2024 10:47AM',
    messageid: '77011',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
request received at clientrequestextn: 19866
received req
=========== Start: getClientServiceRequest extn ========= 19866
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='19866' order by date desc
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  }
]
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '19866',
    to_char: 'JUL-24-2024 10:47AM',
    messageid: '77011',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
request received at clientrequestextn: 19866
received req
=========== Start: getClientServiceRequest extn ========= 19866
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='19866' order by date desc
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:47AM'
  }
]
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '19866',
    to_char: 'JUL-24-2024 10:47AM',
    messageid: '77011',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
request received at clientrequestextn: 19866
received req
=========== Start: getClientServiceRequest extn ========= 19866
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='19866' order by date desc
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '19866',
    to_char: 'JUL-24-2024 10:47AM',
    messageid: '77011',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
request received at clientrequestextn: 19866
received req
=========== Start: getClientServiceRequest extn ========= 19866
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='19866' order by date desc
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '19866',
    to_char: 'JUL-24-2024 10:47AM',
    messageid: '77011',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
request received at clientrequestextn: 19866
received req
=========== Start: getClientServiceRequest extn ========= 19866
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='19866' order by date desc
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '19866',
    to_char: 'JUL-24-2024 10:47AM',
    messageid: '77011',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
request received at clientrequestextn: 19866
received req
=========== Start: getClientServiceRequest extn ========= 19866
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='19866' order by date desc
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '19866',
    to_char: 'JUL-24-2024 10:47AM',
    messageid: '77011',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
request received at clientrequests change: 19866
received req
=========== Start: getClientServiceRequet ========= 19866
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='19866'
request received at clientrequestextn: 19866
received req
=========== Start: getClientServiceRequest extn ========= 19866
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='19866' order by date desc
after clientrequest call
[
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  }
]
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '19866',
    to_char: 'JUL-24-2024 10:47AM',
    messageid: '77011',
    userid: '223460',
    user: 'org2-user1'
  }
]
request received at contactrequests: org2-user1@org2.com
received req
=========== Start: getContactServiceRequest ========= org2-user1@org2.com
select * from contact where email='org2-user1@org2.com'
select * from contact where email='org2-user1@org2.com'
Result {
  command: 'SELECT',
  rowCount: 1,
  oid: null,
  rows: [
    {
      contactId: '223460',
      user: 'org2-user1',
      phone: '65789456',
      email: 'org2-user1@org2.com',
      status: 'Active',
      organization: 'Org2',
      role: 'test-user-role1-org2'
    }
  ],
  fields: [
    Field {
      name: 'contactId',
      tableID: 16417,
      columnID: 1,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'user',
      tableID: 16417,
      columnID: 2,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'phone',
      tableID: 16417,
      columnID: 3,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'email',
      tableID: 16417,
      columnID: 4,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'status',
      tableID: 16417,
      columnID: 5,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'organization',
      tableID: 16417,
      columnID: 6,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    },
    Field {
      name: 'role',
      tableID: 16417,
      columnID: 7,
      dataTypeID: 1043,
      dataTypeSize: -1,
      dataTypeModifier: 104,
      format: 'text'
    }
  ],
  _parsers: [
    [Function: noParse],
    [Function: noParse],
    [Function: noParse],
    [Function: noParse],
    [Function: noParse],
    [Function: noParse],
    [Function: noParse]
  ],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  RowCtor: null,
  rowAsArray: false,
  _prebuiltEmptyResultObject: {
    contactId: null,
    user: null,
    phone: null,
    email: null,
    status: null,
    organization: null,
    role: null
  }
}
[
  {
    contactId: '223460',
    user: 'org2-user1',
    phone: '65789456',
    email: 'org2-user1@org2.com',
    status: 'Active',
    organization: 'Org2',
    role: 'test-user-role1-org2'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 71996
received req
=========== Start: getClientServiceRequet ========= 71996
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='71996'
after clientrequest call
[
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  }
]
request received at clientrequestextn: 71996
received req
=========== Start: getClientServiceRequest extn ========= 71996
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='71996' order by date desc
false
86833 create clientServiceRequest
Wallet path: /app/hyperledger-fabric/mytest-network/chaincodeserviceclient/wallet
Use network channel for new services: synergychannel.
Submit Request details creation transaction.
86833  successfully created
Christus need 1000 M
Transaction complete.
Disconnect from Fabric gateway.
{
  requestId: '86833',
  issue_type: 'Issue',
  product: 'Loan',
  subject: 'Christus need 1000M',
  description: 'Christus need 1000 M',
  message: 'Event:Request Created',
  created_by: 'org2-user1/Org2',
  status: 'open',
  message_from: 'org2-user1/Org2',
  messageinsert: 'yes',
  messageid: '8440'
}
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 02:18PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 71996
received req
=========== Start: getClientServiceRequet ========= 71996
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='71996'
after clientrequest call
[
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  }
]
request received at clientrequestextn: 71996
received req
=========== Start: getClientServiceRequest extn ========= 71996
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='71996' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 02:18PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 02:18PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
request received at clientrequestextn: 86833
received req
=========== Start: getClientServiceRequest extn ========= 86833
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='86833' order by date desc
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Request Created',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 02:18PM'
  }
]
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '86833',
    to_char: 'JUL-24-2024 02:18PM',
    messageid: '8440',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
request received at clientrequestextn: 86833
received req
=========== Start: getClientServiceRequest extn ========= 86833
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='86833' order by date desc
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  }
]
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '86833',
    to_char: 'JUL-24-2024 02:18PM',
    messageid: '8440',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
request received at clientrequestextn: 86833
received req
=========== Start: getClientServiceRequest extn ========= 86833
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='86833' order by date desc
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  }
]
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '86833',
    to_char: 'JUL-24-2024 02:18PM',
    messageid: '8440',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:21PM'
  }
]
request received at clientrequestextn: 86833
received req
=========== Start: getClientServiceRequest extn ========= 86833
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='86833' order by date desc
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '86833',
    to_char: 'JUL-24-2024 02:18PM',
    messageid: '8440',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:File Upload - AnnexureF.pdf Uploaded #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:31PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:File Upload - AnnexureF.pdf Uploaded #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:31PM'
  }
]
request received at clientrequests change: 86833
received req
=========== Start: getClientServiceRequet ========= 86833
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='86833'
after clientrequest call
[
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:File Upload - AnnexureF.pdf Uploaded #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:31PM'
  }
]
request received at clientrequestextn: 86833
received req
=========== Start: getClientServiceRequest extn ========= 86833
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='86833' order by date desc
[
  {
    event: 'Event:Request Created',
    message: '',
    act_message: 'Event:Request Created',
    message_from: 'org2-user1/Org2',
    requestId: '86833',
    to_char: 'JUL-24-2024 02:18PM',
    messageid: '8440',
    userid: '223460',
    user: 'org2-user1'
  }
]
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:File Upload - AnnexureF.pdf Uploaded #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:31PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
request received at clientrequests change: 71996
received req
=========== Start: getClientServiceRequet ========= 71996
select "requestId",issue_type,product,subject,description,message,created_by,status,to_char(date,'MON-DD-YYYY HH12:MIPM') as date from client_service_request where requestId='71996'
after clientrequest call
[
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  }
]
request received at clientrequestextn: 71996
received req
=========== Start: getClientServiceRequest extn ========= 71996
select split_part(message,'-','1') as event,split_part(message,'-','2') as message,message as act_message,message_from,"requestId",to_char(date,'MON-DD-YYYY HH12:MIPM'),messageid,cn."contactId" as userid ,cn.user from client_service_req_extn extn join contact cn on split_part(extn.message_from,'/','1')=cn.user where "requestId"='71996' order by date desc
false
inside get client service request ... Client {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  connectionParameters: ConnectionParameters {
    user: 'pg-synergy',
    database: 'synergy',
    port: 5432,
    host: 'localhost',
    binary: false,
    options: undefined,
    ssl: false,
    client_encoding: '',
    replication: undefined,
    isDomainSocket: false,
    application_name: undefined,
    fallback_application_name: undefined,
    statement_timeout: false,
    lock_timeout: false,
    idle_in_transaction_session_timeout: false,
    query_timeout: false,
    connect_timeout: 0
  },
  user: 'pg-synergy',
  database: 'synergy',
  port: 5432,
  host: 'localhost',
  replication: undefined,
  _Promise: [Function: Promise],
  _types: TypeOverrides {
    _types: {
      getTypeParser: [Function: getTypeParser],
      setTypeParser: [Function: setTypeParser],
      arrayParser: [Object],
      builtins: [Object]
    },
    text: {},
    binary: {}
  },
  _ending: false,
  _ended: false,
  _connecting: false,
  _connected: true,
  _connectionError: false,
  _queryable: true,
  connection: Connection {
    _events: [Object: null prototype] {
      newListener: [Function (anonymous)],
      connect: [Function (anonymous)],
      sslconnect: [Function (anonymous)],
      authenticationCleartextPassword: [Function: bound _handleAuthCleartextPassword],
      authenticationMD5Password: [Function: bound _handleAuthMD5Password],
      authenticationSASL: [Function: bound _handleAuthSASL],
      authenticationSASLContinue: [Function: bound _handleAuthSASLContinue] AsyncFunction,
      authenticationSASLFinal: [Function: bound _handleAuthSASLFinal],
      backendKeyData: [Function: bound _handleBackendKeyData],
      error: [Function: bound _handleErrorEvent],
      errorMessage: [Function: bound _handleErrorMessage],
      readyForQuery: [Function: bound _handleReadyForQuery],
      notice: [Function: bound _handleNotice],
      rowDescription: [Function: bound _handleRowDescription],
      dataRow: [Function: bound _handleDataRow],
      portalSuspended: [Function: bound _handlePortalSuspended],
      emptyQuery: [Function: bound _handleEmptyQuery],
      commandComplete: [Function: bound _handleCommandComplete],
      parseComplete: [Function: bound _handleParseComplete],
      copyInResponse: [Function: bound _handleCopyInResponse],
      copyData: [Function: bound _handleCopyData],
      notification: [Function: bound _handleNotification],
      end: [Function]
    },
    _eventsCount: 23,
    _maxListeners: undefined,
    stream: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'localhost',
      _closeAfterHandlingError: false,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      autoSelectFamilyAttemptedAddresses: [Array],
      [Symbol(async_id_symbol)]: 7,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: true,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _keepAlive: false,
    _keepAliveInitialDelayMillis: 0,
    lastBuffer: false,
    parsedStatements: {},
    ssl: false,
    _ending: false,
    _emitMessage: false,
    _connecting: true,
    [Symbol(kCapture)]: false
  },
  queryQueue: [],
  binary: false,
  processID: 6052,
  secretKey: -1222132371,
  ssl: false,
  _connectionTimeoutMillis: 0,
  _connectionCallback: null,
  activeQuery: null,
  readyForQuery: true,
  hasExecuted: true,
  [Symbol(kCapture)]: false
}
results.rows  [
  {
    requestId: '71996',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test same chat',
    description: 'test same chat',
    message: 'Event:User Message-hello',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-10-2024 04:03PM'
  },
  {
    requestId: '43581',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'testing collab from org 1',
    description: 'testing collab from org 1',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'test-user1/org1',
    status: 'null',
    date: 'JUN-10-2024 03:59PM'
  },
  {
    requestId: '62019',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test socket user1',
    description: 'test socket user1',
    message: 'Event:Request Created',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUN-09-2024 02:57PM'
  },
  {
    requestId: '6959',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test websocket',
    description: 'test websocket',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-08-2024 05:08PM'
  },
  {
    requestId: '4768',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test user 2 socket',
    description: 'test user 2 socket',
    message: 'Event:Status Change - Status changed from open to In progress',
    created_by: 'test-user3/org1',
    status: 'In progress',
    date: 'JUN-08-2024 05:04PM'
  },
  {
    requestId: 'GGG',
    issue_type: 'request',
    product: 'BG',
    subject: 'subject on Bg',
    description: 'latestDetails',
    message: 'Event:Status Change - Status changed from waiting for further input to In progress',
    created_by: 'testorg1',
    status: 'In progress',
    date: 'JUN-06-2024 04:33PM'
  },
  {
    requestId: 'asd122',
    issue_type: 'issue',
    product: 'loan',
    subject: 'testfirst request',
    description: 'sfsdf',
    message: 'Event:Status Change - Status changed from In progress to waiting for further input',
    created_by: 'test-user1/org1',
    status: 'waiting for further input',
    date: 'JUN-06-2024 04:27PM'
  },
  {
    requestId: '19866',
    issue_type: 'Service Request',
    product: 'Cash',
    subject: 'Need cash for test',
    description: 'Need cash for test',
    message: 'Event:File Upload - tomJerry.pdf Uploaded #### QmcaUat66p8R6QCKdv6HFuXcpFv669b6zYSaLhmrA9sSNr',
    created_by: 'org2-user1/Org2',
    status: 'open',
    date: 'JUL-24-2024 10:55AM'
  },
  {
    requestId: '86833',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Christus need 1000M',
    description: 'Christus need 1000 M',
    message: 'Event:File Upload - AnnexureF.pdf Uploaded #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'org2-user1/Org2',
    status: 'In progress',
    date: 'JUL-24-2024 02:31PM'
  },
  {
    requestId: '23268',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test collab from node 1',
    description: 'test collab from node 1',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-23-2024 05:23PM'
  },
  {
    requestId: '10000',
    issue_type: 'Req by prabhat',
    product: 'BG',
    subject: 'Subjecton Guarantee',
    description: 'Request for Guarantee product-approve suresh',
    message: 'description for raisedreq',
    created_by: 'messageforreq',
    status: 'tesorg1',
    date: 'JUL-21-2024 08:05AM'
  },
  {
    requestId: '54073',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'test refresh chat',
    description: 'test refresh chat',
    message: 'Event:File Upload - sample.txt Uploaded #### QmRf22bZar3WKmojipms22PkXH1MZGmvsqzQtuSvQE3uhm',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:49PM'
  },
  {
    requestId: '82817',
    issue_type: 'Issue',
    product: 'Loan',
    subject: 'Initiate chat from node 1',
    description: 'Initiate chat from node 1',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'open',
    date: 'JUL-21-2024 05:16PM'
  },
  {
    requestId: '62768',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'undefined',
    message: 'Event:  epfo.pdf Uploaded #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:08PM'
  },
  {
    requestId: '34641',
    issue_type: 'undefined',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'epfo.pdf #### QmeekBbth9goTXZJftcRZFm54yxVQfEtr2DrKieuiB9BXu',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 05:06PM'
  },
  {
    requestId: '3190',
    issue_type: 'null',
    product: 'undefined',
    subject: 'undefined',
    description: 'Issue Type: Issue Product: Loan',
    message: 'AnnexureF.pdf #### Qmc2gVhEhb3rgoYRME5MTGe8CrzV6LrTnKiyVR1PWAxHnh',
    created_by: 'test-user1/org1',
    status: 'undefined',
    date: 'JUL-21-2024 04:51PM'
  }
]
node:events:492
      throw er; // Unhandled 'error' event
      ^

error: terminating connection due to administrator command
    at Parser.parseErrorMessage (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg-protocol/dist/parser.js:283:98)
    at Parser.handlePacket (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg-protocol/dist/parser.js:122:29)
    at Parser.parse (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg-protocol/dist/parser.js:35:38)
    at Socket.<anonymous> (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg-protocol/dist/index.js:11:42)
    at Socket.emit (node:events:514:28)
    at addChunk (node:internal/streams/readable:376:12)
    at readableAddChunk (node:internal/streams/readable:349:9)
    at Readable.push (node:internal/streams/readable:286:10)
    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)
Emitted 'error' event on Client instance at:
    at Client._handleErrorEvent (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg/lib/client.js:341:10)
    at Client._handleErrorMessage (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg/lib/client.js:352:12)
    at Connection.emit (node:events:514:28)
    at /app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg/lib/connection.js:117:12
    at Parser.parse (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg-protocol/dist/parser.js:36:17)
    at Socket.<anonymous> (/app/hyperledger-fabric/mytest-network/chaincodeserviceclient/node_modules/pg-protocol/dist/index.js:11:42)
    [... lines matching original stack trace ...]
    at Readable.push (node:internal/streams/readable:286:10) {
  length: 116,
  severity: 'FATAL',
  code: '57P01',
  detail: undefined,
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'postgres.c',
  line: '3040',
  routine: 'ProcessInterrupts'
}

Node.js v20.9.0
